{"version":3,"sources":["components/Phonebook.js","services/persons.js","App.js","reportWebVitals.js","index.js"],"names":["PhonebookFilter","newSearch","handleNewSearch","value","onChange","PhonebookList","persons","rmFunction","length","name","number","filter","person","toLowerCase","includes","map","id","PhonebookLine","className","onClick","SuccessBox","message","FailureBox","PhonebookForm","addName","newName","handleNewName","newNumber","handleNewNumber","onSubmit","type","baseURL","personsService","getAllPersons","axios","get","postPerson","post","rmPerson","delete","changePerson","newPerson","put","App","useState","setPersons","setNewName","setNewNumber","setNewSearch","success","setNewSuccess","failure","setNewFailure","resetSuccess","setTimeout","resetFailure","fetchPersons","then","response","data","catch","error","console","log","headers","status","request","useEffect","Phonebook","event","preventDefault","nameObject","filtered","msg","window","confirm","concat","target","removed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0LAGMA,EAAkB,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBACnC,OACE,wDACqB,uBAAOC,MAAOF,EAAWG,SAAUF,QAwBtDG,EAAgB,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,QAASL,EAA2B,EAA3BA,UAAWM,EAAgB,EAAhBA,WAE1C,OAAuB,IAAnBD,EAAQE,QAAoC,KAApBF,EAAQ,GAAGG,MAAqC,KAAtBH,EAAQ,GAAGI,OACxD,KAGP,8BAEAJ,EAAQK,QAAQ,SAAAC,GAAM,OAClBA,EAAOH,KAAKI,cAAcC,SAASb,EAAUY,kBAAgBE,KAC3D,SAAAH,GAAM,OAAI,cAAC,EAAD,CAA+BA,OAAQA,EAAQL,WAAYA,GAAvCK,EAAOI,UASzCC,EAAgB,SAAC,GAA0B,IAAzBL,EAAwB,EAAxBA,OAAQL,EAAgB,EAAhBA,WAC9B,OACE,sBAAKW,UAAU,SAAf,UACA,8BAAsBN,EAAOH,KAA7B,IAAoCG,EAAOF,SAAnCE,EAAOH,MAAuC,wBAAQU,QAAS,kBAAMZ,EAAWK,IAAlC,wBAKpDQ,EAAa,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACK,KAGP,qBAAKH,UAAU,UAAf,SACGG,KAKDC,EAAa,SAAC,GAAe,IAAdD,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACK,KAGP,qBAAKH,UAAU,UAAf,SACGG,KAKQE,EAlEb,SAAC,GAAmE,IAAlEC,EAAiE,EAAjEA,QAASC,EAAwD,EAAxDA,QAASC,EAA+C,EAA/CA,cAAeC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,gBAC9C,OACE,8BACA,uBAAMC,SAAUL,EAAhB,UACE,yCACQ,uBAAOrB,MAAOsB,EAASrB,SAAUsB,IADzC,WAEU,uBAAOvB,MAAOwB,EAAWvB,SAAUwB,OAE7C,8BACE,wBAAQE,KAAK,SAAb,yB,gBClBFC,EAAU,gBAyBDC,EAPQ,CACrBC,cAjBoB,WACpB,OAAOC,IAAMC,IAAIJ,IAiBjBK,WAdiB,SAAAxB,GACjB,OAAOsB,IAAMG,KAAKN,EAASnB,IAc3B0B,SAXe,SAAA1B,GACb,OAAOsB,IAAMK,OAAOR,EAAUnB,EAAOI,KAWvCwB,aARmB,SAAC5B,EAAQ6B,GAC1B,OAAOP,IAAMQ,IAAIX,EAAUnB,EAAOI,GAAIyB,KCuK3BE,EAjLH,WAGV,MAA8BC,mBAAS,CACrC,CAACnC,KAAM,GAAIC,OAAQ,MADrB,mBAAOJ,EAAP,KAAgBuC,EAAhB,KAIA,EAA8BD,mBAAS,IAAvC,mBAAOnB,EAAP,KAAgBqB,EAAhB,KACA,EAAkCF,mBAAS,IAA3C,mBAAOjB,EAAP,KAAkBoB,EAAlB,KACA,EAAkCH,mBAAS,IAA3C,mBAAO3C,EAAP,KAAkB+C,EAAlB,KAEA,EAAiCJ,mBAAS,MAA1C,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAiCN,mBAAS,MAA1C,mBAAOO,EAAP,KAAgBC,EAAhB,KAEMC,EAAe,WACnBC,YAAY,WACVJ,EAAc,QACb,MAGCK,EAAe,WACnBD,YAAY,WACVF,EAAc,QACb,MAGCI,EAAe,kBACnBxB,EAAeC,gBACdwB,MAAK,SAAAC,GACJb,EAAWa,EAASC,SACnBC,OAAM,SAAAC,GACHA,EAAMH,UACRN,EAAc,uEACdU,QAAQC,IAAIF,EAAMH,SAASC,MAC3BG,QAAQC,IAAIF,EAAMH,SAASM,SAC3BF,QAAQC,IAAIF,EAAMH,SAASO,SACnBJ,EAAMK,SACdd,EAAc,0EACdU,QAAQC,IAAIF,EAAMK,WAElBd,EAAc,UAAWS,EAAMxC,SAC/ByC,QAAQC,IAAIF,EAAMxC,UAEpBkC,QAGJY,oBAAUX,EAAc,IAoHxB,OACE,gCACE,cAAC,EAAD,CAAYnC,QAAS4B,IACrB,cAAC,EAAD,CAAY5B,QAAS8B,IACrB,2CACA,cAACiB,EAAD,CAAe5C,QAvHH,SAAC6C,GAIfA,EAAMC,iBAEN,IAAMC,EAAa,CACjB9D,KAAMgB,EACNf,OAAQiB,GAGJ6C,EAAWlE,EAAQK,QAAO,SAAAC,GAAM,OAClCA,EAAOH,KAAKI,gBAAkBY,EAAQZ,iBAC1C,GAAI2D,EAAShE,OAAS,EAAG,CAEvB,IAAMiE,EAAG,UAAMD,EAAS,GAAG/D,KAAlB,kDACLiE,OAAOC,QAAQF,IACjBzC,EAAeQ,aAAagC,EAAS,GAAID,GACxCd,MAAK,SAAAC,GAEJb,EAAWvC,EAAQS,KAAK,SAAAH,GAAM,OAAIA,EAAOI,KAAO0C,EAASC,KAAK3C,GAC1DJ,EACA8C,EAASC,SACXT,EAAc,WAAD,OAAYQ,EAASC,KAAKlD,OACvC4C,OAEFO,OAAM,SAAAC,GACFA,EAAMH,UACRN,EAAc,GAAD,OAAIS,EAAMH,SAASC,KAAKE,QACrCN,IACAO,QAAQC,IAAIF,EAAMH,SAASC,MAC3BG,QAAQC,IAAIF,EAAMH,SAASM,SAC3BF,QAAQC,IAAIF,EAAMH,SAASO,SACnBJ,EAAMK,SACdd,EAAc,+DACdU,QAAQC,IAAIF,EAAMK,UAElBd,EAAcS,EAAMxC,SAEtBkC,YAKJvB,EAAeI,WAAWmC,GACzBd,MAAK,SAAAC,GAEJb,EAAWvC,EAAQsE,OAAOlB,EAASC,OACnCT,EAAc,iBACdG,OAEAO,OAAM,SAAAC,GACHA,EAAMH,UACPN,EAAc,GAAD,OAAIS,EAAMH,SAASC,KAAKE,QACrCC,QAAQC,IAAIF,EAAMH,SAASC,MAC3BG,QAAQC,IAAIF,EAAMH,SAASM,SAC3BF,QAAQC,IAAIF,EAAMH,SAASO,SAClBJ,EAAMK,SACfd,EAAc,8DACdU,QAAQC,IAAIF,EAAMK,UAElBd,EAAcS,EAAMxC,SAEtBkC,OAIJT,EAAW,IACXC,EAAa,KAmDsBtB,QAASA,EAASC,cAhDjC,SAAC2C,GACrBvB,EAAWuB,EAAMQ,OAAO1E,QAgDpBwB,UAAWA,EAAWC,gBA7CJ,SAACyC,GACvBtB,EAAasB,EAAMQ,OAAO1E,UA6CxB,yCACA,cAAC,EAAD,CAAiBF,UAAWA,EAAWC,gBA3CnB,SAACmE,GACvBrB,EAAaqB,EAAMQ,OAAO1E,UA2CxB,cAAC,EAAD,CAAeF,UAAWA,EAAWK,QAASA,EAASC,WAxCrC,SAACK,GACrB,IAAM6D,EAAG,iBAAa7D,EAAOH,KAApB,KACLiE,OAAOC,QAAQF,IAEjBzC,EACCM,SAAS1B,GACT6C,MAAK,SAAAC,GACoB,MAApBA,EAASO,SACXpB,EAAWvC,EAAQK,QAAQ,SAAAmE,GAAO,OAAIA,EAAQ9D,KAAOJ,EAAOI,OAC5DkC,EAAc,WAAD,OAAYtC,EAAOH,OAChC4C,QAEDO,OAAM,SAAAC,GACHA,EAAMH,UACRN,EAAc,yGACdU,QAAQC,IAAIF,EAAMH,SAASC,MAC3BG,QAAQC,IAAIF,EAAMH,SAASM,SAC3BF,QAAQC,IAAIF,EAAMH,SAASO,SACnBJ,EAAMK,SACdd,EAAc,+DACdU,QAAQC,IAAIF,EAAMK,UAElBd,EAAcS,EAAMxC,SAEtBkC,IAEAC,cC1JOuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.c85ead4b.chunk.js","sourcesContent":["import React from 'react'\n\n// Component to filter out entries\nconst PhonebookFilter = ({newSearch, handleNewSearch}) => {\n  return(\n    <div>\n    filter to show with: <input value={newSearch} onChange={handleNewSearch}/>\n    </div>\n  )\n}\n\n// Component to handle addition\nconst PhonebookForm = // Pass functions and state variables\n  ({addName, newName, handleNewName, newNumber, handleNewNumber}) => {\n  return(\n    <div>\n    <form onSubmit={addName}>\n      <div>\n        name: <input value={newName} onChange={handleNewName}/>\n        number: <input value={newNumber} onChange={handleNewNumber}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n        </div>\n    </form>\n    </div>\n  )\n}\n\n// Component to display list of persons\nconst PhonebookList = ({persons, newSearch, rmFunction}) => {\n  // Prevent list from rendering when no data has been received\n  if (persons.length === 1 && persons[0].name === '' && persons[0].number === '') {\n    return null\n  }\n  return (\n    <div>\n    { // Filter and render persons by search term incasesensitively\n    persons.filter( person =>\n        person.name.toLowerCase().includes(newSearch.toLowerCase())).map(\n          person => <PhonebookLine key={person.id} person={person} rmFunction={rmFunction} />\n        )\n    }\n    </div>\n  )\n}\n\n// And individual entry to phonebook, delete-button included\n// rmFunction: what to call when delete-button pressed\nconst PhonebookLine = ({person, rmFunction}) => {\n  return(\n    <div className=\"person\">\n    <p key={person.name}>{person.name} {person.number}</p><button onClick={() => rmFunction(person)}>delete</button>\n    </div>\n  )\n}\n// Component to display messages to user\nconst SuccessBox = ({message}) => {\n  if (message === null) {\n    return null\n  }\n  return(\n    <div className=\"success\">\n      {message}\n    </div>\n  )\n}\n// Component to display failure message\nconst FailureBox = ({message}) => {\n  if (message === null) {\n    return null\n  }\n  return(\n    <div className=\"failure\">\n      {message}\n    </div>\n  )\n}\n\nexport default PhonebookForm\nexport {PhonebookFilter, PhonebookList, SuccessBox, FailureBox}\n","// All pretty empty and selfexplanatory\n\nimport axios from 'axios'\n\nconst baseURL = \"/api/persons/\"\n\nconst getAllPersons = () => {\n  return axios.get(baseURL)\n}\n\nconst postPerson = person => {\n  return axios.post(baseURL, person)\n}\n\nconst rmPerson = person => {\n    return(axios.delete(baseURL + person.id))\n}\n\nconst changePerson = (person, newPerson) => {\n    return axios.put(baseURL + person.id, newPerson)\n}\n\nconst personsService = {\n  getAllPersons: getAllPersons,\n  postPerson: postPerson,\n  rmPerson: rmPerson,\n  changePerson: changePerson\n}\n\nexport default personsService\n","import React, { useState, useEffect } from 'react'\nimport PhonebookForm, {\n  PhonebookFilter,\n  PhonebookList,\n  SuccessBox,\n  FailureBox } from './components/Phonebook'\nimport personsService from './services/persons'\n\n// Phonebook exercise\nconst App = () => {\n  // Initialize states\n  // Array of person-objects\n  const [persons, setPersons] = useState([\n    {name: '', number: ''}\n  ])\n  // Next three states for user input\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [newSearch, setNewSearch] = useState('')\n  // Next two states for messages to display\n  const [success, setNewSuccess] = useState(null)\n  const [failure, setNewFailure] = useState(null)\n  // Function to reset successmessage\n  const resetSuccess = () => {\n    setTimeout( () => {\n      setNewSuccess(null)\n    }, 5000)\n  }\n  // Function to reset failuremessage\n  const resetFailure = () => {\n    setTimeout( () => {\n      setNewFailure(null)\n    }, 5000)\n  }\n  // Function to get list of persons from server\n  const fetchPersons = () =>\n    personsService.getAllPersons()\n    .then(response => {\n      setPersons(response.data)\n    }).catch(error => {\n      if (error.response) {\n        setNewFailure(\"Server responded, but there was another fault.\\nCheck your console.\")\n        console.log(error.response.data)\n        console.log(error.response.headers)\n        console.log(error.response.status)\n      } else if(error.request) {\n        setNewFailure(\"Request made to fetch persons, but no response received.\\nSee console.\")\n        console.log(error.request)\n      } else {\n        setNewFailure(\"Error: \", error.message)\n        console.log(error.message)\n      }\n      resetFailure()\n    })\n  // Get persons on first render\n  useEffect(fetchPersons, [])\n  // Function to add name to persons\n  const addName = (event) => {\n    // Fetch persons again to avoid conflict/duplicate entry from another client\n    // Doesn't really work tho because we'd have to wait\n    // fetchPersons()\n    event.preventDefault()\n    // Temporary object for person\n    const nameObject = {\n      name: newName,\n      number: newNumber\n    }\n    // Check for duplicate name-entry\n    const filtered = persons.filter(person =>\n        person.name.toLowerCase() === newName.toLowerCase())\n    if (filtered.length > 0) {\n      // Duplicate entry -> ask for edit\n      const msg = `${filtered[0].name} is already in the list.\\nWanna change number?`\n      if (window.confirm(msg)) {\n        personsService.changePerson(filtered[0], nameObject)\n        .then(response => {\n          // Success -> add response data so local persons matches server\n          setPersons(persons.map( person => person.id !== response.data.id\n            ? person\n            : response.data))\n            setNewSuccess(`Changed ${response.data.name}`)\n            resetSuccess()\n          }\n        ).catch(error => {\n          if (error.response) {\n            setNewFailure(`${error.response.data.error}`)\n            resetFailure()\n            console.log(error.response.data)\n            console.log(error.response.headers)\n            console.log(error.response.status)\n          } else if(error.request) {\n            setNewFailure(\"Request to edit person sent, but no response.\\nSee console.\")\n            console.log(error.request)\n          } else {\n            setNewFailure(error.message)\n          }\n          resetFailure()\n          }\n        )\n      }\n    } else { // Not a duplicate -> just add entry\n      personsService.postPerson(nameObject)\n      .then(response => {\n        // Success -> just add response data so local persons matches server\n        setPersons(persons.concat(response.data))\n        setNewSuccess(\"Person added.\")\n        resetSuccess()\n        }\n      ).catch(error => {\n        if(error.response) {\n          setNewFailure(`${error.response.data.error}`)\n          console.log(error.response.data)\n          console.log(error.response.headers)\n          console.log(error.response.status)\n        } else if (error.request) {\n          setNewFailure(\"Request to add person sent, but no response.\\nSee console.\")\n          console.log(error.request)\n        } else {\n          setNewFailure(error.message)\n        }\n        resetFailure()\n      })\n    }\n    // Reset input-states again\n    setNewName(\"\")\n    setNewNumber(\"\")\n  }\n  // Function to handle input to name field\n  const handleNewName = (event) => {\n    setNewName(event.target.value)\n  }\n  // Function to handle input to number field\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n  // Function to handle input to search field\n  const handleNewSearch = (event) => {\n    setNewSearch(event.target.value)\n  }\n  // Function to remove person\n  const handleRemoval = (person) => {\n    const msg = `Delete ${person.name}?`\n    if (window.confirm(msg)) {\n      // Check if person already removed by another client\n      personsService\n      .rmPerson(person)\n      .then(response => {\n        if (response.status === 204) {\n          setPersons(persons.filter( removed => removed.id !== person.id))\n          setNewSuccess(`Removed ${person.name}`)\n          resetSuccess()\n        }\n      }).catch(error => {\n        if (error.response) {\n          setNewFailure(\"Server responded, but there was another fault (person probably already removed).\\nCheck your console.\")\n          console.log(error.response.data)\n          console.log(error.response.headers)\n          console.log(error.response.status)\n        } else if(error.request) {\n          setNewFailure(\"Requested removal of person, but no response.\\nSee console.\")\n          console.log(error.request)\n        } else {\n          setNewFailure(error.message)\n        }\n        resetFailure()\n        // refetch persons in case there was conflict with server\n        fetchPersons()\n      })\n    }\n  }\n\n  return (\n    <div>\n      <SuccessBox message={success}/>\n      <FailureBox message={failure}/>\n      <h2>Phonebook</h2>\n      <PhonebookForm addName={addName} newName={newName} handleNewName={handleNewName}\n        newNumber={newNumber} handleNewNumber={handleNewNumber}/>\n      <h2>Numbers</h2>\n      <PhonebookFilter newSearch={newSearch} handleNewSearch={handleNewSearch}/>\n      <PhonebookList newSearch={newSearch} persons={persons} rmFunction={handleRemoval}/>\n\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}